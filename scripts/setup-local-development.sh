#!/bin/bash

# AI Model as a Service - Local Development Setup Script
# This script sets up local Supabase development environment

set -e

echo "🏠 Setting up Local Supabase Development Environment"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    print_error "Supabase CLI is not installed. Please install it first:"
    echo "npm install -g supabase"
    exit 1
fi

print_status "Supabase CLI found ✓"

# Check if Docker is running
if ! docker info &> /dev/null; then
    print_error "Docker is not running. Please start Docker first."
    exit 1
fi

print_status "Docker is running ✓"

# Initialize Supabase if not already initialized
if [ ! -f "supabase/config.toml" ]; then
    print_status "Initializing Supabase project..."
    supabase init
    print_success "Supabase project initialized"
else
    print_status "Supabase project already initialized ✓"
fi

# Start local Supabase services
print_status "Starting local Supabase services..."
if supabase start; then
    print_success "Local Supabase services started"
else
    print_error "Failed to start local Supabase services"
    exit 1
fi

# Get local project details
print_status "Getting local project details..."
local_url=$(supabase status | grep "API URL" | awk '{print $3}')
local_anon_key=$(supabase status | grep "anon key" | awk '{print $3}')

# Create local environment file
print_status "Creating local environment file..."
cat > .env.local << EOF
# Local Development Environment
# Generated by setup-local-development.sh

# Supabase Local Configuration
NEXT_PUBLIC_SUPABASE_URL=$local_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=$local_anon_key

# Gateway API Configuration (use your existing gateway)
NEXT_PUBLIC_GATEWAY_URL=https://ai-gateway-170185267560.us-central1.run.app

# Development Configuration
NODE_ENV=development
NEXT_PUBLIC_COOKIE_DOMAIN=localhost

# Local Supabase Admin (for server-side operations)
SUPABASE_SERVICE_ROLE_KEY=your-local-service-role-key

# Gateway Admin API Key (use your existing key)
GATEWAY_ADMIN_API_KEY=sk-admin-your-admin-key-here
EOF

print_success "Created .env.local file"

# Apply migrations to local database
print_status "Applying migrations to local database..."
if supabase db reset; then
    print_success "Migrations applied to local database"
else
    print_warning "Failed to apply migrations (this might be expected if no migrations exist)"
fi

# Show local project status
print_status "Local Supabase Status:"
supabase status

print_success "Local development environment setup completed!"
print_warning "Next steps:"
echo "1. Your local Supabase is running at: $local_url"
echo "2. Use .env.local for local development"
echo "3. Access Supabase Studio at: http://localhost:54323"
echo "4. Start your Next.js app with: npm run dev"
echo ""
print_status "Local development benefits:"
echo "• No cloud project limits"
echo "• No database size restrictions"
echo "• No rate limits"
echo "• Fast development cycle"
echo "• Cost: $0"
echo ""
print_warning "Remember:"
echo "• Local data is temporary (resets when you restart)"
echo "• Use cloud projects for persistent data"
echo "• Deploy to staging/production for integration testing"
