name: AI Model Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]

env:
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Clean install dependencies
      run: npm ci

    - name: Disable Next.js telemetry
      run: npx next telemetry disable
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Build application (no cache)
      env:
        NEXT_FORCE_TURBOPACK: 0
        NEXT_TELEMETRY_DISABLED: 1
        NODE_OPTIONS: --max-old-space-size=4096
      run: |
        rm -rf .next node_modules/.cache || true
        npm run build

    - name: Verify critical routes exist
      run: |
        set -e
        grep -R "/forgot-password" .next/ || (echo "forgot-password route missing" && exit 1)
        grep -R "/reset-password" .next/ || (echo "reset-password route missing" && exit 1)
        grep -R "/auth/callback" .next/ || (echo "auth/callback route missing" && exit 1)
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: .next/

  deploy-to-vercel:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "VERCEL_ENV=production" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_PROD }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          echo "VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_DEV }}" >> $GITHUB_ENV
        fi
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        echo "üîß Pulling Vercel environment for $VERCEL_ENV..."
        echo "Org: $VERCEL_ORG_ID | Project: $VERCEL_PROJECT_ID"
        if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
          echo "‚ùå Missing Vercel configuration (token/org/project)" && exit 1
        fi
        vercel pull --yes \
          --environment="$VERCEL_ENV" \
          --org="$VERCEL_ORG_ID" \
          --project="$VERCEL_PROJECT_ID" \
          --token="$VERCEL_TOKEN"
    
    - name: Build Project Artifacts (no cache)
      env:
        NEXT_TELEMETRY_DISABLED: 1
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        vercel build --token="$VERCEL_TOKEN" --force
    
    - name: Deploy Project Artifacts to Vercel
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: vercel deploy --prebuilt --token="$VERCEL_TOKEN" --force
    
    - name: Get deployment URL
      id: deployment
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        DEPLOYMENT_URL=$(vercel ls --token="$VERCEL_TOKEN" | grep "${{ github.sha }}" | head -1 | awk '{print $2}')
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "üöÄ ${{ env.VERCEL_ENV }} environment deployed: $DEPLOYMENT_URL"

    - name: Validate critical routes on deployment
      run: |
        set -e
        echo "Checking ${{ steps.deployment.outputs.url }}"
        curl -sSf "${{ steps.deployment.outputs.url }}/forgot-password" >/dev/null
        curl -sSf "${{ steps.deployment.outputs.url }}/reset-password" >/dev/null
        curl -sSf "${{ steps.deployment.outputs.url }}/auth/callback" >/dev/null

    - name: Point develop alias to latest deployment
      if: github.ref == 'refs/heads/develop'
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ALIAS_DEV: ${{ secrets.VERCEL_ALIAS_DEV }}
      run: |
        ALIAS_DOMAIN="$VERCEL_ALIAS_DEV"
        if [ -z "$ALIAS_DOMAIN" ]; then
          echo "No VERCEL_ALIAS_DEV secret configured; skipping alias update"; exit 0; fi
        vercel alias set "${{ steps.deployment.outputs.url }}" "$ALIAS_DOMAIN" --token="$VERCEL_TOKEN"
    
    - name: Comment deployment URL on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **${{ env.VERCEL_ENV }} deployment ready!**\n\nüîó **Preview URL:** ${{ steps.deployment.outputs.url }}\n\nüìù **Commit:** ${{ github.sha }}`
          })