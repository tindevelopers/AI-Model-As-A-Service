name: Deploy AI Model Service Frontend to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: ai-model-service-frontend
  REGION: us-central1

jobs:
  # Validate secrets and build for all events
  validate-and-build:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-secrets.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required secrets
        id: check-secrets
        run: |
          echo "Checking required secrets..."
          
          # Check if we're on main branch and have required secrets for deployment
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ -z "${{ secrets.GCP_PROJECT_ID }}" ]]; then
              echo "‚ùå Missing GCP_PROJECT_ID secret"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [[ -z "${{ secrets.GCP_SA_KEY }}" ]]; then
              echo "‚ùå Missing GCP_SA_KEY secret"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [[ -z "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" ]]; then
              echo "‚ùå Missing NEXT_PUBLIC_SUPABASE_URL secret"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "‚úÖ All required secrets are present"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "üìã Pull request - skipping deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          NEXT_PUBLIC_GATEWAY_URL: ${{ secrets.NEXT_PUBLIC_GATEWAY_URL || 'https://placeholder.run.app' }}

  # Deploy only on main branch with valid secrets
  deploy:
    needs: validate-and-build
    if: needs.validate-and-build.outputs.should-deploy == 'true'
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Container
        run: |
          # Build the Docker image
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          
          # Push the Docker image
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_GATEWAY_URL=${{ secrets.NEXT_PUBLIC_GATEWAY_URL }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            GATEWAY_ADMIN_API_KEY=${{ secrets.GATEWAY_ADMIN_API_KEY }}
          flags: |
            --allow-unauthenticated
            --port=3000
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=100

      - name: Show Output
        run: |
          echo "üöÄ Deployment successful!"
          echo "üìç Service URL: ${{ steps.deploy.outputs.url }}"

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ Automated deployment to Cloud Run
            
            **Service Details:**
            - Service URL: ${{ steps.deploy.outputs.url }}
            - Commit: ${{ github.sha }}
            - Build: ${{ github.run_number }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Show setup instructions if secrets are missing
  setup-instructions:
    needs: validate-and-build
    if: needs.validate-and-build.outputs.should-deploy == 'false' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Show Setup Instructions
        run: |
          echo "üîß SETUP REQUIRED"
          echo "================"
          echo ""
          echo "Your deployment failed because required secrets are missing."
          echo "Please configure the following GitHub repository secrets:"
          echo ""
          echo "üìã Required Secrets:"
          echo "  ‚Ä¢ GCP_PROJECT_ID - Your Google Cloud Project ID"
          echo "  ‚Ä¢ GCP_SA_KEY - Service Account JSON key"
          echo "  ‚Ä¢ NEXT_PUBLIC_SUPABASE_URL - Supabase project URL"
          echo "  ‚Ä¢ NEXT_PUBLIC_SUPABASE_ANON_KEY - Supabase anon key"
          echo "  ‚Ä¢ NEXT_PUBLIC_GATEWAY_URL - Gateway service URL"
          echo "  ‚Ä¢ SUPABASE_SERVICE_ROLE_KEY - Supabase service role key"
          echo "  ‚Ä¢ GATEWAY_ADMIN_API_KEY - Gateway admin API key"
          echo ""
          echo "üîó Configure secrets at:"
          echo "   https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo ""
          echo "üìö See DEPLOYMENT_GUIDE.md for detailed setup instructions"